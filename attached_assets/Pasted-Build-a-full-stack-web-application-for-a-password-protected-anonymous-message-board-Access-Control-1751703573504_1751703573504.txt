Build a full-stack web application for a password-protected anonymous message board.

Access Control:
* Users must enter a fixed password: “darktalent2024!” to access the message board.
* No login system — just a single shared password.
* Use cookies or session storage to persist access after login.

Core Features:
* Authenticated users can:
    * Submit anonymous messages (no usernames or IDs).
    * View all messages (newest on top).
    * Like any message.
    * Comment on any message.
* Each message should display:
    * Message text
    * Timestamp of submission
    * Number of likes
    * Number of comments
* Clicking on a message reveals its full comment thread.

AI Bot Auto-Replies:
* When a new message is posted, automatically generate a comment from an AI bot.
* The bot should reply to each post with a short, funny or witty or sarcastic reaction, preferably one that roasts the message or user, but no more than 1–2 sentences.
* Use a clear and fun name for the bot and style its comments slightly differently in the UI to differentiate from comments posted by a user.
* Use a suitable, open-source LLM endpoint and provide a prompt like: "Reply to this anonymous message with a short, funny or witty or sarcastic reaction, preferably one that roasts the message or user, but no more than 1–2 sentences. The message is: [user message]" 
Real-Time Updates:
* Use WebSockets or polling to update:
    * New messages
    * New likes
    * New comments all in real time, without needing to refresh the page.

Database:
* Store all messages, likes, comments, and AI bot replies using Replit DB or another simple persistent database.
* Ensure clean data structure with clear separation between user comments and AI-generated comments.

Anti-Spam:
* Limit each IP to 1 new message per minute.
* Optionally throttle likes/comments to avoid abuse.

UI/Branding:
* Match the visual design and UI patterns used by The Network School (ns.com):
    * Clean, modern aesthetic
    * Rounded corners, generous padding, sans-serif fonts
    * Soft color palette with high readability
    * Responsive design for mobile and desktop
* Mimic layout structure, card styles, button designs, and text hierarchy of NS.com.
* Use Tailwind CSS or inline styles to match NS brand identity.

Stability & Code Quality:
* Use Node.js + Express for backend.
* Use HTML/CSS/JS for frontend (React optional).
* Validate and sanitize all inputs to prevent XSS.
* Use try/catch and proper error handling for DB operations.
* Modular, well-commented code — easy to maintain.
Prioritize simplicity, fun, and stability. The app should be quirky, fast, and never break under normal use.